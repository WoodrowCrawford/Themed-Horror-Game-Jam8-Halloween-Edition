//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.3
//     from Assets/Scripts/Input/PlayerInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputActions"",
    ""maps"": [
        {
            ""name"": ""InBed"",
            ""id"": ""9f110178-9868-45dd-9ce6-dd71dfd402f3"",
            ""actions"": [
                {
                    ""name"": ""TestForBed"",
                    ""type"": ""Button"",
                    ""id"": ""a3464a43-a588-42a3-bce7-4953a51c29fe"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SwitchActionMap"",
                    ""type"": ""Button"",
                    ""id"": ""8dad0333-564c-43d5-b757-3b647e56fc49"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""2fe1f354-4500-4753-9a9e-1ac3f2ad434c"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Toggle Flashlight"",
                    ""type"": ""Button"",
                    ""id"": ""d08e3967-131c-4f12-90e2-c6f325dffc9b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""3b4612b3-41f7-406f-8ae9-34cb5a1844cf"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TestForBed"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""629215dc-7a1d-4fd3-8c31-6cf52e4cdb0e"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchActionMap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1fd278ad-7e2f-4a9c-92c2-bf39e0b5b795"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2109e6e3-f6f3-4a1e-ae68-6f3e57ecfd7e"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Toggle Flashlight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3a874de9-7c42-4205-b497-bcdbcb285715"",
                    ""path"": ""<Keyboard>/7"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Toggle Flashlight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a85549da-77f6-4521-8f80-9dbf85b1edd3"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Toggle Flashlight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""OutOfBed"",
            ""id"": ""1bd69809-3683-44fc-8037-d53493e510b2"",
            ""actions"": [
                {
                    ""name"": ""TestForOutOfBed"",
                    ""type"": ""Button"",
                    ""id"": ""a6f90f3c-0c0a-42f8-9234-10effdbace9b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""14932ff3-2306-4434-af1f-ef8847ad6d07"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""SwitchActionMap"",
                    ""type"": ""Button"",
                    ""id"": ""a4766fa1-e813-4fe2-80b1-7bfd0fa05dc5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e933457a-c43c-4288-a70e-940b570fe98f"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TestForOutOfBed"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""64e6f765-f2a8-4264-a77e-75140cac01af"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchActionMap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""aab1bcf4-1765-42c8-a549-dfac5be6ac38"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // InBed
        m_InBed = asset.FindActionMap("InBed", throwIfNotFound: true);
        m_InBed_TestForBed = m_InBed.FindAction("TestForBed", throwIfNotFound: true);
        m_InBed_SwitchActionMap = m_InBed.FindAction("SwitchActionMap", throwIfNotFound: true);
        m_InBed_Look = m_InBed.FindAction("Look", throwIfNotFound: true);
        m_InBed_ToggleFlashlight = m_InBed.FindAction("Toggle Flashlight", throwIfNotFound: true);
        // OutOfBed
        m_OutOfBed = asset.FindActionMap("OutOfBed", throwIfNotFound: true);
        m_OutOfBed_TestForOutOfBed = m_OutOfBed.FindAction("TestForOutOfBed", throwIfNotFound: true);
        m_OutOfBed_Look = m_OutOfBed.FindAction("Look", throwIfNotFound: true);
        m_OutOfBed_SwitchActionMap = m_OutOfBed.FindAction("SwitchActionMap", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // InBed
    private readonly InputActionMap m_InBed;
    private IInBedActions m_InBedActionsCallbackInterface;
    private readonly InputAction m_InBed_TestForBed;
    private readonly InputAction m_InBed_SwitchActionMap;
    private readonly InputAction m_InBed_Look;
    private readonly InputAction m_InBed_ToggleFlashlight;
    public struct InBedActions
    {
        private @PlayerInputActions m_Wrapper;
        public InBedActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @TestForBed => m_Wrapper.m_InBed_TestForBed;
        public InputAction @SwitchActionMap => m_Wrapper.m_InBed_SwitchActionMap;
        public InputAction @Look => m_Wrapper.m_InBed_Look;
        public InputAction @ToggleFlashlight => m_Wrapper.m_InBed_ToggleFlashlight;
        public InputActionMap Get() { return m_Wrapper.m_InBed; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(InBedActions set) { return set.Get(); }
        public void SetCallbacks(IInBedActions instance)
        {
            if (m_Wrapper.m_InBedActionsCallbackInterface != null)
            {
                @TestForBed.started -= m_Wrapper.m_InBedActionsCallbackInterface.OnTestForBed;
                @TestForBed.performed -= m_Wrapper.m_InBedActionsCallbackInterface.OnTestForBed;
                @TestForBed.canceled -= m_Wrapper.m_InBedActionsCallbackInterface.OnTestForBed;
                @SwitchActionMap.started -= m_Wrapper.m_InBedActionsCallbackInterface.OnSwitchActionMap;
                @SwitchActionMap.performed -= m_Wrapper.m_InBedActionsCallbackInterface.OnSwitchActionMap;
                @SwitchActionMap.canceled -= m_Wrapper.m_InBedActionsCallbackInterface.OnSwitchActionMap;
                @Look.started -= m_Wrapper.m_InBedActionsCallbackInterface.OnLook;
                @Look.performed -= m_Wrapper.m_InBedActionsCallbackInterface.OnLook;
                @Look.canceled -= m_Wrapper.m_InBedActionsCallbackInterface.OnLook;
                @ToggleFlashlight.started -= m_Wrapper.m_InBedActionsCallbackInterface.OnToggleFlashlight;
                @ToggleFlashlight.performed -= m_Wrapper.m_InBedActionsCallbackInterface.OnToggleFlashlight;
                @ToggleFlashlight.canceled -= m_Wrapper.m_InBedActionsCallbackInterface.OnToggleFlashlight;
            }
            m_Wrapper.m_InBedActionsCallbackInterface = instance;
            if (instance != null)
            {
                @TestForBed.started += instance.OnTestForBed;
                @TestForBed.performed += instance.OnTestForBed;
                @TestForBed.canceled += instance.OnTestForBed;
                @SwitchActionMap.started += instance.OnSwitchActionMap;
                @SwitchActionMap.performed += instance.OnSwitchActionMap;
                @SwitchActionMap.canceled += instance.OnSwitchActionMap;
                @Look.started += instance.OnLook;
                @Look.performed += instance.OnLook;
                @Look.canceled += instance.OnLook;
                @ToggleFlashlight.started += instance.OnToggleFlashlight;
                @ToggleFlashlight.performed += instance.OnToggleFlashlight;
                @ToggleFlashlight.canceled += instance.OnToggleFlashlight;
            }
        }
    }
    public InBedActions @InBed => new InBedActions(this);

    // OutOfBed
    private readonly InputActionMap m_OutOfBed;
    private IOutOfBedActions m_OutOfBedActionsCallbackInterface;
    private readonly InputAction m_OutOfBed_TestForOutOfBed;
    private readonly InputAction m_OutOfBed_Look;
    private readonly InputAction m_OutOfBed_SwitchActionMap;
    public struct OutOfBedActions
    {
        private @PlayerInputActions m_Wrapper;
        public OutOfBedActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @TestForOutOfBed => m_Wrapper.m_OutOfBed_TestForOutOfBed;
        public InputAction @Look => m_Wrapper.m_OutOfBed_Look;
        public InputAction @SwitchActionMap => m_Wrapper.m_OutOfBed_SwitchActionMap;
        public InputActionMap Get() { return m_Wrapper.m_OutOfBed; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(OutOfBedActions set) { return set.Get(); }
        public void SetCallbacks(IOutOfBedActions instance)
        {
            if (m_Wrapper.m_OutOfBedActionsCallbackInterface != null)
            {
                @TestForOutOfBed.started -= m_Wrapper.m_OutOfBedActionsCallbackInterface.OnTestForOutOfBed;
                @TestForOutOfBed.performed -= m_Wrapper.m_OutOfBedActionsCallbackInterface.OnTestForOutOfBed;
                @TestForOutOfBed.canceled -= m_Wrapper.m_OutOfBedActionsCallbackInterface.OnTestForOutOfBed;
                @Look.started -= m_Wrapper.m_OutOfBedActionsCallbackInterface.OnLook;
                @Look.performed -= m_Wrapper.m_OutOfBedActionsCallbackInterface.OnLook;
                @Look.canceled -= m_Wrapper.m_OutOfBedActionsCallbackInterface.OnLook;
                @SwitchActionMap.started -= m_Wrapper.m_OutOfBedActionsCallbackInterface.OnSwitchActionMap;
                @SwitchActionMap.performed -= m_Wrapper.m_OutOfBedActionsCallbackInterface.OnSwitchActionMap;
                @SwitchActionMap.canceled -= m_Wrapper.m_OutOfBedActionsCallbackInterface.OnSwitchActionMap;
            }
            m_Wrapper.m_OutOfBedActionsCallbackInterface = instance;
            if (instance != null)
            {
                @TestForOutOfBed.started += instance.OnTestForOutOfBed;
                @TestForOutOfBed.performed += instance.OnTestForOutOfBed;
                @TestForOutOfBed.canceled += instance.OnTestForOutOfBed;
                @Look.started += instance.OnLook;
                @Look.performed += instance.OnLook;
                @Look.canceled += instance.OnLook;
                @SwitchActionMap.started += instance.OnSwitchActionMap;
                @SwitchActionMap.performed += instance.OnSwitchActionMap;
                @SwitchActionMap.canceled += instance.OnSwitchActionMap;
            }
        }
    }
    public OutOfBedActions @OutOfBed => new OutOfBedActions(this);
    public interface IInBedActions
    {
        void OnTestForBed(InputAction.CallbackContext context);
        void OnSwitchActionMap(InputAction.CallbackContext context);
        void OnLook(InputAction.CallbackContext context);
        void OnToggleFlashlight(InputAction.CallbackContext context);
    }
    public interface IOutOfBedActions
    {
        void OnTestForOutOfBed(InputAction.CallbackContext context);
        void OnLook(InputAction.CallbackContext context);
        void OnSwitchActionMap(InputAction.CallbackContext context);
    }
}
