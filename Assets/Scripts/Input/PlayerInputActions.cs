//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.3
//     from Assets/Scripts/Input/PlayerInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputActions"",
    ""maps"": [
        {
            ""name"": ""Default"",
            ""id"": ""9ee35fa8-a6e4-4c3b-a5c2-a2b22e2dde28"",
            ""actions"": [
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""1236896b-f2df-4b52-bf78-fb937533c6e9"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""TogglePause"",
                    ""type"": ""Button"",
                    ""id"": ""d8a8c9e3-7b5f-4d55-8aa2-3a9c3521b4d2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""d5025d4d-f5f9-4419-b686-602e89acd780"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""80371446-0205-424a-8fc9-6fed95a6debb"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cb07398e-36ba-4574-96d2-bc333f1c95e1"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TogglePause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f804a5e3-87da-402b-97c4-a6b6160a1059"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""InBed"",
            ""id"": ""9f110178-9868-45dd-9ce6-dd71dfd402f3"",
            ""actions"": [
                {
                    ""name"": ""Toggle Flashlight"",
                    ""type"": ""Button"",
                    ""id"": ""d08e3967-131c-4f12-90e2-c6f325dffc9b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ToggleGoUnderBed"",
                    ""type"": ""Button"",
                    ""id"": ""0d1d5f5a-1855-4933-9042-ca98e55b79ec"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""GetOutOfBed"",
                    ""type"": ""Button"",
                    ""id"": ""8ae5082b-c17d-4081-836f-e00cea02d700"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Sleep"",
                    ""type"": ""Button"",
                    ""id"": ""027e2a3f-2423-498c-95b4-09ef822266a4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a85549da-77f6-4521-8f80-9dbf85b1edd3"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Toggle Flashlight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""04369d8e-b5a0-4736-b9d0-0cf3d00e5fee"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ToggleGoUnderBed"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""92a53fc3-8bee-449f-b836-f5cd3fb3a2ed"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""GetOutOfBed"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d8490057-5f46-4e88-93d5-bd9e0d2f420b"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Sleep"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""OutOfBed"",
            ""id"": ""1bd69809-3683-44fc-8037-d53493e510b2"",
            ""actions"": [
                {
                    ""name"": ""Toggle Flashlight"",
                    ""type"": ""Button"",
                    ""id"": ""aea011c5-61ab-4d69-a259-9a03ff7894da"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""6889e0ea-4cb8-4e4d-ab4c-097420d22540"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""GetInBed"",
                    ""type"": ""Button"",
                    ""id"": ""23711b06-e4a5-4461-b73f-a99ecae39c68"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""85aef309-4998-4b68-a5ea-247eb435c484"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Toggle Flashlight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""5aa5c580-d3e0-4b79-8f5c-9a7a320d0978"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""85d86a50-5a17-4109-a244-b3a19a8a468a"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""c6e2a306-4cad-418c-ac0c-e133f6ea798b"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""f50dd881-dbd8-4dea-87ff-a18b2f9d8cb9"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""174bd233-aa66-4666-aa3c-86841e501958"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""591beb9c-a40e-40ec-9bd0-2f0508013c25"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""GetInBed"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""InWardrobe"",
            ""id"": ""53856f6e-34f8-452e-ab93-886f767d939c"",
            ""actions"": [
                {
                    ""name"": ""ToggleWardrobeDoor"",
                    ""type"": ""Button"",
                    ""id"": ""4f8bf5d7-1145-4c99-b25e-28ff7df60a0b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Toggle Flashlight"",
                    ""type"": ""Button"",
                    ""id"": ""29b01640-2658-44f6-b102-d1743218905f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ToggleInOutWardrobe"",
                    ""type"": ""Button"",
                    ""id"": ""9d64eb85-2141-476f-8f37-b9a1db4a4237"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""3159f58a-7cd9-4649-a33e-32cebdf6bfcc"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ToggleWardrobeDoor"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c6107287-4215-4950-876d-4a527a191531"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ToggleInOutWardrobe"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""860b6eeb-f567-4e2c-bd06-3b5b42f36ce4"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Toggle Flashlight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Default
        m_Default = asset.FindActionMap("Default", throwIfNotFound: true);
        m_Default_Look = m_Default.FindAction("Look", throwIfNotFound: true);
        m_Default_TogglePause = m_Default.FindAction("TogglePause", throwIfNotFound: true);
        m_Default_Interact = m_Default.FindAction("Interact", throwIfNotFound: true);
        // InBed
        m_InBed = asset.FindActionMap("InBed", throwIfNotFound: true);
        m_InBed_ToggleFlashlight = m_InBed.FindAction("Toggle Flashlight", throwIfNotFound: true);
        m_InBed_ToggleGoUnderBed = m_InBed.FindAction("ToggleGoUnderBed", throwIfNotFound: true);
        m_InBed_GetOutOfBed = m_InBed.FindAction("GetOutOfBed", throwIfNotFound: true);
        m_InBed_Sleep = m_InBed.FindAction("Sleep", throwIfNotFound: true);
        // OutOfBed
        m_OutOfBed = asset.FindActionMap("OutOfBed", throwIfNotFound: true);
        m_OutOfBed_ToggleFlashlight = m_OutOfBed.FindAction("Toggle Flashlight", throwIfNotFound: true);
        m_OutOfBed_Move = m_OutOfBed.FindAction("Move", throwIfNotFound: true);
        m_OutOfBed_GetInBed = m_OutOfBed.FindAction("GetInBed", throwIfNotFound: true);
        // InWardrobe
        m_InWardrobe = asset.FindActionMap("InWardrobe", throwIfNotFound: true);
        m_InWardrobe_ToggleWardrobeDoor = m_InWardrobe.FindAction("ToggleWardrobeDoor", throwIfNotFound: true);
        m_InWardrobe_ToggleFlashlight = m_InWardrobe.FindAction("Toggle Flashlight", throwIfNotFound: true);
        m_InWardrobe_ToggleInOutWardrobe = m_InWardrobe.FindAction("ToggleInOutWardrobe", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Default
    private readonly InputActionMap m_Default;
    private IDefaultActions m_DefaultActionsCallbackInterface;
    private readonly InputAction m_Default_Look;
    private readonly InputAction m_Default_TogglePause;
    private readonly InputAction m_Default_Interact;
    public struct DefaultActions
    {
        private @PlayerInputActions m_Wrapper;
        public DefaultActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Look => m_Wrapper.m_Default_Look;
        public InputAction @TogglePause => m_Wrapper.m_Default_TogglePause;
        public InputAction @Interact => m_Wrapper.m_Default_Interact;
        public InputActionMap Get() { return m_Wrapper.m_Default; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DefaultActions set) { return set.Get(); }
        public void SetCallbacks(IDefaultActions instance)
        {
            if (m_Wrapper.m_DefaultActionsCallbackInterface != null)
            {
                @Look.started -= m_Wrapper.m_DefaultActionsCallbackInterface.OnLook;
                @Look.performed -= m_Wrapper.m_DefaultActionsCallbackInterface.OnLook;
                @Look.canceled -= m_Wrapper.m_DefaultActionsCallbackInterface.OnLook;
                @TogglePause.started -= m_Wrapper.m_DefaultActionsCallbackInterface.OnTogglePause;
                @TogglePause.performed -= m_Wrapper.m_DefaultActionsCallbackInterface.OnTogglePause;
                @TogglePause.canceled -= m_Wrapper.m_DefaultActionsCallbackInterface.OnTogglePause;
                @Interact.started -= m_Wrapper.m_DefaultActionsCallbackInterface.OnInteract;
                @Interact.performed -= m_Wrapper.m_DefaultActionsCallbackInterface.OnInteract;
                @Interact.canceled -= m_Wrapper.m_DefaultActionsCallbackInterface.OnInteract;
            }
            m_Wrapper.m_DefaultActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Look.started += instance.OnLook;
                @Look.performed += instance.OnLook;
                @Look.canceled += instance.OnLook;
                @TogglePause.started += instance.OnTogglePause;
                @TogglePause.performed += instance.OnTogglePause;
                @TogglePause.canceled += instance.OnTogglePause;
                @Interact.started += instance.OnInteract;
                @Interact.performed += instance.OnInteract;
                @Interact.canceled += instance.OnInteract;
            }
        }
    }
    public DefaultActions @Default => new DefaultActions(this);

    // InBed
    private readonly InputActionMap m_InBed;
    private IInBedActions m_InBedActionsCallbackInterface;
    private readonly InputAction m_InBed_ToggleFlashlight;
    private readonly InputAction m_InBed_ToggleGoUnderBed;
    private readonly InputAction m_InBed_GetOutOfBed;
    private readonly InputAction m_InBed_Sleep;
    public struct InBedActions
    {
        private @PlayerInputActions m_Wrapper;
        public InBedActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @ToggleFlashlight => m_Wrapper.m_InBed_ToggleFlashlight;
        public InputAction @ToggleGoUnderBed => m_Wrapper.m_InBed_ToggleGoUnderBed;
        public InputAction @GetOutOfBed => m_Wrapper.m_InBed_GetOutOfBed;
        public InputAction @Sleep => m_Wrapper.m_InBed_Sleep;
        public InputActionMap Get() { return m_Wrapper.m_InBed; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(InBedActions set) { return set.Get(); }
        public void SetCallbacks(IInBedActions instance)
        {
            if (m_Wrapper.m_InBedActionsCallbackInterface != null)
            {
                @ToggleFlashlight.started -= m_Wrapper.m_InBedActionsCallbackInterface.OnToggleFlashlight;
                @ToggleFlashlight.performed -= m_Wrapper.m_InBedActionsCallbackInterface.OnToggleFlashlight;
                @ToggleFlashlight.canceled -= m_Wrapper.m_InBedActionsCallbackInterface.OnToggleFlashlight;
                @ToggleGoUnderBed.started -= m_Wrapper.m_InBedActionsCallbackInterface.OnToggleGoUnderBed;
                @ToggleGoUnderBed.performed -= m_Wrapper.m_InBedActionsCallbackInterface.OnToggleGoUnderBed;
                @ToggleGoUnderBed.canceled -= m_Wrapper.m_InBedActionsCallbackInterface.OnToggleGoUnderBed;
                @GetOutOfBed.started -= m_Wrapper.m_InBedActionsCallbackInterface.OnGetOutOfBed;
                @GetOutOfBed.performed -= m_Wrapper.m_InBedActionsCallbackInterface.OnGetOutOfBed;
                @GetOutOfBed.canceled -= m_Wrapper.m_InBedActionsCallbackInterface.OnGetOutOfBed;
                @Sleep.started -= m_Wrapper.m_InBedActionsCallbackInterface.OnSleep;
                @Sleep.performed -= m_Wrapper.m_InBedActionsCallbackInterface.OnSleep;
                @Sleep.canceled -= m_Wrapper.m_InBedActionsCallbackInterface.OnSleep;
            }
            m_Wrapper.m_InBedActionsCallbackInterface = instance;
            if (instance != null)
            {
                @ToggleFlashlight.started += instance.OnToggleFlashlight;
                @ToggleFlashlight.performed += instance.OnToggleFlashlight;
                @ToggleFlashlight.canceled += instance.OnToggleFlashlight;
                @ToggleGoUnderBed.started += instance.OnToggleGoUnderBed;
                @ToggleGoUnderBed.performed += instance.OnToggleGoUnderBed;
                @ToggleGoUnderBed.canceled += instance.OnToggleGoUnderBed;
                @GetOutOfBed.started += instance.OnGetOutOfBed;
                @GetOutOfBed.performed += instance.OnGetOutOfBed;
                @GetOutOfBed.canceled += instance.OnGetOutOfBed;
                @Sleep.started += instance.OnSleep;
                @Sleep.performed += instance.OnSleep;
                @Sleep.canceled += instance.OnSleep;
            }
        }
    }
    public InBedActions @InBed => new InBedActions(this);

    // OutOfBed
    private readonly InputActionMap m_OutOfBed;
    private IOutOfBedActions m_OutOfBedActionsCallbackInterface;
    private readonly InputAction m_OutOfBed_ToggleFlashlight;
    private readonly InputAction m_OutOfBed_Move;
    private readonly InputAction m_OutOfBed_GetInBed;
    public struct OutOfBedActions
    {
        private @PlayerInputActions m_Wrapper;
        public OutOfBedActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @ToggleFlashlight => m_Wrapper.m_OutOfBed_ToggleFlashlight;
        public InputAction @Move => m_Wrapper.m_OutOfBed_Move;
        public InputAction @GetInBed => m_Wrapper.m_OutOfBed_GetInBed;
        public InputActionMap Get() { return m_Wrapper.m_OutOfBed; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(OutOfBedActions set) { return set.Get(); }
        public void SetCallbacks(IOutOfBedActions instance)
        {
            if (m_Wrapper.m_OutOfBedActionsCallbackInterface != null)
            {
                @ToggleFlashlight.started -= m_Wrapper.m_OutOfBedActionsCallbackInterface.OnToggleFlashlight;
                @ToggleFlashlight.performed -= m_Wrapper.m_OutOfBedActionsCallbackInterface.OnToggleFlashlight;
                @ToggleFlashlight.canceled -= m_Wrapper.m_OutOfBedActionsCallbackInterface.OnToggleFlashlight;
                @Move.started -= m_Wrapper.m_OutOfBedActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_OutOfBedActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_OutOfBedActionsCallbackInterface.OnMove;
                @GetInBed.started -= m_Wrapper.m_OutOfBedActionsCallbackInterface.OnGetInBed;
                @GetInBed.performed -= m_Wrapper.m_OutOfBedActionsCallbackInterface.OnGetInBed;
                @GetInBed.canceled -= m_Wrapper.m_OutOfBedActionsCallbackInterface.OnGetInBed;
            }
            m_Wrapper.m_OutOfBedActionsCallbackInterface = instance;
            if (instance != null)
            {
                @ToggleFlashlight.started += instance.OnToggleFlashlight;
                @ToggleFlashlight.performed += instance.OnToggleFlashlight;
                @ToggleFlashlight.canceled += instance.OnToggleFlashlight;
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @GetInBed.started += instance.OnGetInBed;
                @GetInBed.performed += instance.OnGetInBed;
                @GetInBed.canceled += instance.OnGetInBed;
            }
        }
    }
    public OutOfBedActions @OutOfBed => new OutOfBedActions(this);

    // InWardrobe
    private readonly InputActionMap m_InWardrobe;
    private IInWardrobeActions m_InWardrobeActionsCallbackInterface;
    private readonly InputAction m_InWardrobe_ToggleWardrobeDoor;
    private readonly InputAction m_InWardrobe_ToggleFlashlight;
    private readonly InputAction m_InWardrobe_ToggleInOutWardrobe;
    public struct InWardrobeActions
    {
        private @PlayerInputActions m_Wrapper;
        public InWardrobeActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @ToggleWardrobeDoor => m_Wrapper.m_InWardrobe_ToggleWardrobeDoor;
        public InputAction @ToggleFlashlight => m_Wrapper.m_InWardrobe_ToggleFlashlight;
        public InputAction @ToggleInOutWardrobe => m_Wrapper.m_InWardrobe_ToggleInOutWardrobe;
        public InputActionMap Get() { return m_Wrapper.m_InWardrobe; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(InWardrobeActions set) { return set.Get(); }
        public void SetCallbacks(IInWardrobeActions instance)
        {
            if (m_Wrapper.m_InWardrobeActionsCallbackInterface != null)
            {
                @ToggleWardrobeDoor.started -= m_Wrapper.m_InWardrobeActionsCallbackInterface.OnToggleWardrobeDoor;
                @ToggleWardrobeDoor.performed -= m_Wrapper.m_InWardrobeActionsCallbackInterface.OnToggleWardrobeDoor;
                @ToggleWardrobeDoor.canceled -= m_Wrapper.m_InWardrobeActionsCallbackInterface.OnToggleWardrobeDoor;
                @ToggleFlashlight.started -= m_Wrapper.m_InWardrobeActionsCallbackInterface.OnToggleFlashlight;
                @ToggleFlashlight.performed -= m_Wrapper.m_InWardrobeActionsCallbackInterface.OnToggleFlashlight;
                @ToggleFlashlight.canceled -= m_Wrapper.m_InWardrobeActionsCallbackInterface.OnToggleFlashlight;
                @ToggleInOutWardrobe.started -= m_Wrapper.m_InWardrobeActionsCallbackInterface.OnToggleInOutWardrobe;
                @ToggleInOutWardrobe.performed -= m_Wrapper.m_InWardrobeActionsCallbackInterface.OnToggleInOutWardrobe;
                @ToggleInOutWardrobe.canceled -= m_Wrapper.m_InWardrobeActionsCallbackInterface.OnToggleInOutWardrobe;
            }
            m_Wrapper.m_InWardrobeActionsCallbackInterface = instance;
            if (instance != null)
            {
                @ToggleWardrobeDoor.started += instance.OnToggleWardrobeDoor;
                @ToggleWardrobeDoor.performed += instance.OnToggleWardrobeDoor;
                @ToggleWardrobeDoor.canceled += instance.OnToggleWardrobeDoor;
                @ToggleFlashlight.started += instance.OnToggleFlashlight;
                @ToggleFlashlight.performed += instance.OnToggleFlashlight;
                @ToggleFlashlight.canceled += instance.OnToggleFlashlight;
                @ToggleInOutWardrobe.started += instance.OnToggleInOutWardrobe;
                @ToggleInOutWardrobe.performed += instance.OnToggleInOutWardrobe;
                @ToggleInOutWardrobe.canceled += instance.OnToggleInOutWardrobe;
            }
        }
    }
    public InWardrobeActions @InWardrobe => new InWardrobeActions(this);
    public interface IDefaultActions
    {
        void OnLook(InputAction.CallbackContext context);
        void OnTogglePause(InputAction.CallbackContext context);
        void OnInteract(InputAction.CallbackContext context);
    }
    public interface IInBedActions
    {
        void OnToggleFlashlight(InputAction.CallbackContext context);
        void OnToggleGoUnderBed(InputAction.CallbackContext context);
        void OnGetOutOfBed(InputAction.CallbackContext context);
        void OnSleep(InputAction.CallbackContext context);
    }
    public interface IOutOfBedActions
    {
        void OnToggleFlashlight(InputAction.CallbackContext context);
        void OnMove(InputAction.CallbackContext context);
        void OnGetInBed(InputAction.CallbackContext context);
    }
    public interface IInWardrobeActions
    {
        void OnToggleWardrobeDoor(InputAction.CallbackContext context);
        void OnToggleFlashlight(InputAction.CallbackContext context);
        void OnToggleInOutWardrobe(InputAction.CallbackContext context);
    }
}
